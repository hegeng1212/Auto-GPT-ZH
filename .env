# 搜索OPENAI_API_KEY只设置OPENAI_API_KEY即可
# OPENAI_API_KEY=your-openai-api-key


################################################################################
### AUTO-GPT - 常规设置
################################################################################

# EXECUTE_LOCAL_COMMANDS - 允许本地命令执行（示例：False）
EXECUTE_LOCAL_COMMANDS=False

# RESTRICT_TO_WORKSPACE - 将文件操作限制在工作区 ./auto_gpt_workspace 中（默认为 True）
RESTRICT_TO_WORKSPACE=True

# USER_AGENT - 定义 requests 库用于浏览网站的用户代理 (字符串)
USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36"

# AI_SETTINGS_FILE - 指定要使用的 AI 设置文件（默认为 ai_settings.yaml）
AI_SETTINGS_FILE=ai_settings.yaml

################################################################################
### LLM提供者
################################################################################

### OPENAI
## OPENAI_API_KEY - OpenAI API 密钥（例如：my-openai-api-key）
OPENAI_API_KEY=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

## TEMPERATURE - 在 OpenAI 中设置temperature 准确性（默认为 0）0为最准 1的话返回的多样性比较多
TEMPERATURE=0

## USE_AZURE - 是否使用 Azure OpenAI（默认为 False）
USE_AZURE=False

### AZURE
# moved to `azure.yaml.template`

################################################################################
### LLM 模型
################################################################################

## SMART_LLM_MODEL - 智能语言模型（默认为 gpt-4）
## FAST_LLM_MODEL - 快速语言模型（默认为 gpt-3.5-turbo）
SMART_LLM_MODEL=gpt-4
FAST_LLM_MODEL=gpt-3.5-turbo

### LLM 模型设置
## FAST_TOKEN_LIMIT - OpenAI 的快速令牌限制（默认为 4000）
## SMART_TOKEN_LIMIT - OpenAI 的智能令牌限制（默认为 8000）
## 当使用 --gpt3only 时，此值需要设置为 4000。
FAST_TOKEN_LIMIT=4000
SMART_TOKEN_LIMIT=8000

################################################################################
### MEMORY
################################################################################

### MEMORY_BACKEND - 内存后端类型
## local - 默认
## pinecone - Pinecone（如果已配置）
## redis - Redis（如果已配置）
## milvus -  Milvus（如果已配置）
## MEMORY_INDEX - 在内存后端中创建的索引名称（默认为 auto-gpt）

MEMORY_BACKEND=local
MEMORY_INDEX=auto-gpt

### PINECONE
## PINECONE_API_KEY - Pinecone API密钥（示例：my-pinecone-api-key）
## PINECONE_ENV - Pinecone环境（区域）（示例：us-west-2）
# PINECONE_API_KEY=your-pinecone-api-key
# PINECONE_ENV=your-pinecone-region

### REDIS
## REDIS_HOST - Redis主机（默认值：localhost，使用“redis”进行docker-compose）
## REDIS_PORT - Redis端口（默认值：6379）
## REDIS_PASSWORD - Redis密码（默认值：""）
## WIPE_REDIS_ON_START - 开始时清除数据/索引（默认值：True）
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=
# WIPE_REDIS_ON_START=True

### WEAVIATE
## MEMORY_BACKEND - 使用 'weaviate' 使用 Weaviate 向量存储
## WEAVIATE_HOST - Weaviate 主机 IP
## WEAVIATE_PORT - Weaviate 主机端口
## WEAVIATE_PROTOCOL - Weaviate 主机协议 (例如 'http')
## USE_WEAVIATE_EMBEDDED - 是否使用嵌入式 Weaviate
## WEAVIATE_EMBEDDED_PATH - 运行嵌入式 Weaviate 时要持久化数据的文件系统路径
## WEAVIATE_USERNAME - Weaviate 用户名
## WEAVIATE_PASSWORD - Weaviate 密码
## WEAVIATE_API_KEY - 如果使用基于 API 密钥的身份验证，则使用 Weaviate API 密钥

# WEAVIATE_HOST="127.0.0.1"
# WEAVIATE_PORT=8080
# WEAVIATE_PROTOCOL="http"
# USE_WEAVIATE_EMBEDDED=False
# WEAVIATE_EMBEDDED_PATH="/home/me/.local/share/weaviate"
# WEAVIATE_USERNAME=
# WEAVIATE_PASSWORD=
# WEAVIATE_API_KEY=

### MILVUS
## MILVUS_ADDR - Milvus 远程地址 (例如 localhost:19530)
## MILVUS_COLLECTION - Milvus 集合,
## 如果您想启动一个新的内存并保留旧的内存，请更改它。
# MILVUS_ADDR=your-milvus-cluster-host-port
# MILVUS_COLLECTION=autogpt

################################################################################
### 图像生成提供者
################################################################################

### OPEN AI
## IMAGE_PROVIDER - 图像提供商（例如：dalle）
## IMAGE_SIZE - 图像尺寸（例如：256）
##   DALLE: 256, 512, 1024
# IMAGE_PROVIDER=dalle
# IMAGE_SIZE=256

### HUGGINGFACE
## HUGGINGFACE_IMAGE_MODEL -  Huggingface的文本转图像模型（默认值：CompVis/stable-diffusion-v1-4）
## HUGGINGFACE_API_TOKEN - HuggingFace API令牌（例如：my-huggingface-api-token）
# HUGGINGFACE_IMAGE_MODEL=CompVis/stable-diffusion-v1-4
# HUGGINGFACE_API_TOKEN=your-huggingface-api-token

### STABLE DIFFUSION WEBUI
## SD_WEBUI_AUTH - Stable diffusion webui的用户名和密码，例如username:password
## SD_WEBUI_URL - Stable diffusion webui的API URL，例如http://127.0.0.1:7860
# SD_WEBUI_AUTH=
# SD_WEBUI_URL=http://127.0.0.1:7860

################################################################################
### 音频到文本提供者
################################################################################

### HUGGINGFACE
# HUGGINGFACE_AUDIO_TO_TEXT_MODEL=facebook/wav2vec2-base-960h

################################################################################
### 用于仓库操作的Git提供者
################################################################################

### GITHUB
## GITHUB_API_KEY - Github API密钥/PAT（示例：github_pat_123）
## GITHUB_USERNAME - Github用户名
# GITHUB_API_KEY=github_pat_123
# GITHUB_USERNAME=your-github-username

################################################################################
### WEB 浏览器
################################################################################

### BROWSER
## HEADLESS_BROWSER - 是否在无头模式下运行浏览器 (默认值：True)
## USE_WEB_BROWSER - 设置要与Selenium一起使用的Web浏览器驱动程序 (默认值：chrome)
##   注意：根据您当前的浏览器，将其设置为'chrome'，'firefox'或'safari'
HEADLESS_BROWSER=False
USE_WEB_BROWSER=chrome

## BROWSE_CHUNK_MAX_LENGTH - 在浏览网站时，定义要总结的块的长度（以标记数量计，不包括响应。通常明智的是FAST_TOKEN_LIMIT的75％）
# BROWSE_CHUNK_MAX_LENGTH=3000
## BROWSE_SPACY_LANGUAGE_MODEL 用于拆分句子。通过pip安装其他语言，并在此处设置模型名称。例如：python -m spacy download zh_core_web_sm
# BROWSE_SPACY_LANGUAGE_MODEL=en_core_web_sm

### GOOGLE
## GOOGLE_API_KEY - 谷歌API密钥 (Example: my-google-api-key)
## CUSTOM_SEARCH_ENGINE_ID - 自定义搜索引擎ID (Example: my-custom-search-engine-id)
# GOOGLE_API_KEY=your-google-api-key
# CUSTOM_SEARCH_ENGINE_ID=your-custom-search-engine-id

################################################################################
### TTS 提供者
################################################################################

### MAC OS
## USE_MAC_OS_TTS - 是否使用Mac OS TTS（默认：False）
# USE_MAC_OS_TTS=False

### STREAMELEMENTS
## USE_BRIAN_TTS - 是否使用Brian TTS（默认：False）
# USE_BRIAN_TTS=False

### ELEVENLABS
## ELEVENLABS_API_KEY - Eleven Labs API密钥（示例：my-elevenlabs-api-key）
## ELEVENLABS_VOICE_1_ID - Eleven Labs语音1的ID（示例：my-voice-id-1）
## ELEVENLABS_VOICE_2_ID -  Eleven Labs语音2的ID（示例：my-voice-id-2）
# ELEVENLABS_API_KEY=your-elevenlabs-api-key
# ELEVENLABS_VOICE_1_ID=your-voice-id-1
# ELEVENLABS_VOICE_2_ID=your-voice-id-2

################################################################################
### TWITTER API
################################################################################

# TW_CONSUMER_KEY=
# TW_CONSUMER_SECRET=
# TW_ACCESS_TOKEN=
# TW_ACCESS_TOKEN_SECRET=
